?datasets
attach(iris)
head
head(iris)
plot(iris)
head(iris, type="p")
head(iris, type="s")
plot(iris, type="s")
plot(iris, type="p")
plot(iris)
plot(Sepal.Length, Sepal.Width)
plot(Sepal.Length, Sepal.Width, type="s")
plot(Sepal.Length, Sepal.Width, type="b")
plot(Sepal.Length, Sepal.Width, type="s")
plot(Sepal.Length, Sepal.Width, type="s", col="blue")
plot(Sepal.Length, petal.Width, type="s", col="blue")
plot(Sepal.Length, Petal.Width, type="s", col="blue")
plot(Petal.Length, Petal.Width, type="s", col="blue")
plot(Petal.Length, Petal.Width, col="blue")
view(data)
View(data)
foo <- c91,2,3,4)
foo <- c(1,2,3,4)
oof,_ c("A","B","C,"D")")
oof,_ c("A","B","C,"D")
oof<= c("A","B","C,"D")
oof<- c("A","B","C,"D")
oof <- c("A","B","C,"D")
ofo <- c(TRUE, FALSE,TRUE, TRUE)
oof <- ("A","B","C","D")
oof<-('a','b','c','d')
oof<-("A","B","C","D")
oof<-("A", "B", "C", "D")
oof<-c("A", "B", "C", "D")
coof <= cbind(foo, oof)
coof <- cbind(foo, oof)
roof <- rbind(foo,oof)
moof<-matrix(data=1:12, nrow=3, ncol=4)
moof
length(foo)
length(foo)
> moof
jumble <- c(4,1,2,3)
sort(jumble)
source('~/.active-rstudio-document')
jumble()
tail(jumble)
sort(jumble)
tail(jumble, n=1)
coof(1,)
coof[1,]
coof[,1]
coof[2,1]
coof(,"oof")
coof[,"oof"]
coof[1:3,]
coof[c(3,1,2),]
doof <- data.frame("V1"=1:4,"V2"=c("A","B","C","D"),"V3"=5:8)
doof
class(doof)
names(doof0)
names(doof)
str(doof)
View(doof)
x <- c(3,4,5)
# use hashtag
x <- c(3,4,5)
library("MASS")
data("painters")
View(painters)
View(painters)
painters$Composition
df[order(painters$Composition),]
painters[order(painters$Composition),]
painters[order(-painters$Composition),]
xx<-painters[order(-painters$Composition),]
xx
xx<-painters[order(-painters$Composition),c(1:3)]
xx
xx<-painters[order(-painters$Composition, painters$ Drawing),c(1:3)]
xx
painters[,c("Composition","Drawing")]
painters[,c(1,4,2)]
painters[c(1:5),-4]
painters[which(School=="A"),]
painters[which(painters$School=="A"),]
painters[painters$School=="A",]
painters[painters$School=="Z",]
painters[which(painters$School=="Z"),]
painters[-which(painters$School=="Z"),]
painters[which(painters$School=="Z"),]
which(painters$School=="Z"
which(painters$School=="A"
)
which(painters$School=="A")
which(painters$School=="Z")
painters(which(painters$School !="A" & painters$ > 10),]
painters(which(painters$School !="A" & painters$Colour > 10),]
painters[which(painters$School !="A" & painters$Colour > 10),]
create new data frame
flavour <- c("choc", "strawberry", "vanilla", "choc", "strawberry", "strawberry")
gender <- c("F", "F", "M", "M", "F", "M")
icecream <- data.frame(flavour, gender) #icecream df made up of 2 factor variables, flavour & gender, with 3 & 2 levels respectively (choc/strawberry/vanilla & F/M)
#AIM: create a frequency distribution table which shows the count of each gender in the df
table(icecream$gender)
#AIM: create a frequency distribution table which shows the count of each flavour in the df
table(icecream$flavour)
#AIM: create Contingency/2-Way Table showing the counts for each combination of flavour & gender level
table(icecream$flavour, icecream$gender)
source('~/.active-rstudio-document')
table(icecream$flavour, icecream$gender)
table(icecream$gender)
table(icecream$flavour, icecream$gender)
max(icecream$gender)
moof <- matrix(data = 1:12, nrow=3, ncol=4)
moof <- matrix(data = 1:12, nrow=3, ncol=4)
moof
apply(moof,1,sum)
apply(moof,2,sum)
tapply(painters$Drawing,painters$School,mean)
tapply(painters$Drawing,painters$School,median)
for (i in 2010:2015)
{   print(paste("in the year",i))}
container <- NULL
for (i in 1:10) [container[i] = i^2]
for (i in 1:10) {container[i] = i^2}
unique(painters$Composition)
unique(painters$School)
unique(painters$School)
attach(iris)
table(iris$Sepal.Length)
cbind(table(iris$Sepal.Width))
cbind(cumsum(table(iris$Sepal.Width))
attach(iris)
cbind(cumsum(table(iris$Sepal.Width)))
str(iris)
range(iris)
range(iris$Petal.Width)
table(iris$Species)
cbind(table(iris$Species))
max(iris$Sepal.Width)
max[iris$Species, iris$Sepal.Length]
table(iris$Species, iris$Sepal.Length)
cbind(table(iris$Species, iris$Sepal.Width))
table(iris$Species, iris$Sepal.Length, iris$Sepal.Width)
mean(iris)
mean(iris$Sepal.Length)
apply(iris(1:4),max)
attach(iris)
apply(iris(1:4), 1, max)
dfs <- iris(c(1,2,3,4))
dfs <- iris
dfs <- dfs(c(1:4))
dft <- dfs(c(1:4))
dft <- dfs[c(1:4)]
apply(dft,1,mean)
apply(dft,2,mean)
install.packages("corrplot)
install.packages("corrplot")
install.packages("corrplot")
cor(X,Y)
X <- c(2,4,6,4,5,6,7)
Y <- c(4,8,12,9,9,12,13)
model = lm(formula = Y ~ X, x=TRUE, y=TRUE)
summary(model)
cor(X,Y)
COR <- cor(X,Y)
corrplot.mixed(COR)
corrplot.mixed(COR)
corrplot(COR)
library(corrplot)
corrplot.mixed(COR)
DATA <- c(X,Y)
DATA <- c(X;Y)
DATA <- [X,Y]
DATA <- cbind(X,Y)
COR <- cor(X,Y)
corrplot.mixed(COR)
COR <- cor(DATA)
corrplot.mixed(COR)
Z <- c(20,40,35,5,2,66,89)
DATA <- cbind(X,Y,Z)
COR <- cor(DATA)
corrplot.mixed(COR)
qx <- qr(X)
model = lm(formula = Y ~ X, x=TRUE, y=TRUE)
summary(model)
plot(X, Y)
abline(model)
plot(X, Y, title="linear regression",ylim=c(0, 14))
plot(X, Y, title="linear regression",ylim=c(0, 14),xlim=c(0,9))
abline(model)
summary(model)
X <- c(2,6,7,3,5,6,7)
Y <- c(4,8,12,9,9,12,13)
Z <- c(20,40,35,5,2,66,89)
model = lm(formula = Y ~ X, x=TRUE, y=TRUE)
summary(model)
plot(X, Y, title="linear regression",ylim=c(0, 14),xlim=c(0,9))
abline(model)
install.packages("e1071")
# test with train data
library("e1071")
source('~/.active-rstudio-document')
View(iris)
library("e1071")
data(iris)
attach(iris)
## classification mode
# default with factor response:
model_1 <- svm(Species ~ ., data = iris)
# alternatively the traditional interface:
x <- subset(iris, select = -Species)
y <- Species
install.packages("plyr")
install.packages("dplyr")
library(plyr)
rename(TestData, c("SourceFieldClassification"="Class"))
source('~/.active-rstudio-document')
names(TestData)
rename(TestData, c("SourceFieldClassification"="Class"))
names(TestData)
TestData <- rename(TestData, c("SourceFieldClassification"="Class"))
names(TestData)
table(TestData$Class)
TestData$Class[TestData$Class=="Alpha"] <- "ALPHA"
table(TestData$Class)
TestData$Classx <- ""
names(TestData)
TestData$Classx[TestData$Class="ALPHA"] <- TestData$Class
TestData$Classx[TestData$Class=="ALPHA"] <- TestData$Class
table(TestData$Classx)
TestData$Classx <- TestData$Class
table(TestData$Classx)
table(TestData$Classx, TestData$Class)
TestData$Class[TestData$Class=="Numeric"] <- "NUMERIC"
table(TestData$Classx, TestData$Class)
table(TestData$Class, TestData$Class)
TestData$Classx <- TestData$Class[,drop = TRUE]
TestData$Class <- TestData$Class[,drop = TRUE]
table(TestData$Class, TestData$Class)
source('D:/Dissertation/R/CrossTabs.R')
tabs
source('D:/Dissertation/R/AnalyseVariable.R')
p <- ggplot(iris, aes(factor(Species), Width))
p + geom_violin()
library(ggplot2)
p <- ggplot(iris, aes(factor(Species), Width))
p + geom_violin()
p <- ggplot(iris, aes(factor(Species), Petal.Width))
p + geom_violin()
p + geom_violin() + geom_jitter(height = 0)
p <- ggplot(iris, aes(Sepal.Width, Petal.Width))
p + geom_violin()
p + geom_violin() + geom_jitter(height = 0)
p <- ggplot(iris, aes(factor(Species), Petal.Width))
p + geom_violin()
p + geom_violin() + geom_jitter(height = 0)
?rt
y <- rt(200, df = 5)
qqnorm(y);
qqline(y, col = 2)
qqplot(y, rt(300, df = 5))
qqnorm(precip, ylab = "Precipitation [in/yr] for 70 US cities")
qplot(seq_along(iris$Sepal.Length), iris$Sepal.Length)
qplot(iris$Sepal.Length, geom="histogram")
ggplot(data=iris, aes(iris$Sepal.Length)) + geom_histogram()
ggplot(data=iris, aes(iris$Sepal.Length)) + geom_histogram() + geom_density(col=2)
ggplot(data=iris, aes(iris$Sepal.Length)) + geom_histogram() + geom_density(col=1)
ggplot(data=iris, aes(iris$Sepal.Length)) + geom_histogram() + geom_density()
testx <- iris$Sepal.Length
qplot(seq_along(iris$Sepal.Length), testx)
# histogram
# qplot(iris$Sepal.Length, geom="histogram")
ggplot(data=iris, aes(testx)) + geom_histogram()
# cumulative hist
ggplot(NULL,aes(testx))+geom_histogram(aes(y=cumsum(..count..)))+
stat_bin(aes(y=cumsum(..count..)),geom="line",color="green")
fit.norm <- fitdist(testx, "norm")
library(fitdistrplus)
library(logspline)
install.packages('fitdistrplus')
install.packages('logspline')
library(fitdistrplus)
library(logspline)
fit.norm <- fitdist(testx, "norm")
plot(fit.norm)
testx.freq
table(testx)
freq <- table(testx)
freq
tibble2 <- data_frame(freq)
tibble2 <- as_data_frame(freq)
tibble2 <- as_data_frame(as.data.frame(freq))
library (tibble)
tibble2 <- as_data_frame(as.data.frame(freq))
View(tibble2)
names(iris)
names <- names(iris)
mystr <- str(iris)
mystr <- str(iris)
pkgs <- c("caret", "nnet", "glmnet", "RANN", "ipred", "rpart")
for(i in pkgs)
install.packages(i, dependencies = c("Depends", "Imports", "Suggests"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("caret",dependencies = c("Depends", "Imports", "Suggests"))
install.packages("nnet",dependencies = c("Depends", "Imports", "Suggests"))
install.packages("glmnet",dependencies = c("Depends", "Imports", "Suggests"))
install.packages("RANN",dependencies = c("Depends", "Imports", "Suggests"))
install.packages("ipred",dependencies = c("Depends", "Imports", "Suggests"))
install.packages("rpart",dependencies = c("Depends", "Imports", "Suggests"))
source('D:/Dissertation/R/Functions/AnalyseVariable2.R')
source('D:/Dissertation/R/Functions/AnalyseVariable2.R')
source('D:/Dissertation/R/Functions/AnalyseVariable2.R')
source('D:/Dissertation/R/Functions/AnalyseVariable2.R')
source('D:/Dissertation/R/Functions/myContent.R')
source('D:/Dissertation/R/Functions/AnalyseVariable2.R')
shiny::runApp('D:/Dissertation/R/Shiny/BurrowApp')
shiny::runApp('D:/Dissertation/R/Shiny/BurrowApp')
source('D:/Dissertation/R/ggplot.R')
source('D:/Dissertation/R/ggplot.R')
library(ggplot2)
myData <- iris
f1 <- "Petal.Length"
f2 <- "Sepal.Width"
Field <- f2
rnorm <- data.frame(x = c(rnorm(length(myData[,Field]))))
myBinWidth = (max(myData[,Field]) - min(myData[,Field])) / 20
maxy <- max(hist(myData[,Field], breaks=seq(min(myData[,Field]), max(myData[,Field]), by=myBinWidth), plot=FALSE)$counts)
myMean = mean(myData[,Field])
myMedian = median(myData[,Field])
myQuantile = quantile(myData[,Field])
ggplot(myData,
aes_string(x=Field)) +
geom_histogram(binwidth=myBinWidth, colour="black", fill="grey") +
geom_vline(aes_string(xintercept=myMean), color="dodgerblue", linetype="solid", size=1) +
annotate("text", x = myMean, y = maxy * 0.9, label = "Mean", color="dodgerblue") +
geom_vline(aes_string(xintercept=myQuantile[2]), color="sienna1", linetype="solid", size=.5) +
annotate("text", x = myQuantile[2], y = maxy * 0.7, label = "Q1", color="sienna1") +
geom_vline(aes_string(xintercept=myQuantile[3]), color="sienna3", linetype="solid", size=1) +
annotate("text", x = myQuantile[3], y = maxy, label = "Median", color="sienna3") +
geom_vline(aes_string(xintercept=myQuantile[4]), color="sienna1", linetype="solid", size=.5) +
annotate("text", x = myQuantile[4], y = maxy * 0.7, label = "Q3", color="sienna1")
ggplot(myData,
aes_string(x=Field)) +
geom_density()
# make a df with the test data, a normal distribution
normData <- data.frame(x = c(myData[,Field],
rnorm(length(myData[,Field]))),
g = gl(2, length(myData[,Field])))
normData <- data.frame(x = c(rnorm(length(myData[,Field])),
rnorm(length(myData[,Field]))),
g = gl(2, length(myData[,Field])))
ggplot(normData,
aes(x, colour = g)) +
stat_ecdf()
# ====================================
# qq plot
# ====================================
# see http://onlinestatbook.com/2/advanced_graphs/q-q_plots.html
ggplot(myData,
aes_string(sample = Field)) +
stat_qq()
# ====================================
# Sorted index plot
# ====================================
Field = "Petal.Width"
sortdata  <- data.frame(sort(myData[,Field]))
ggplot() +
geom_point(aes_string(x=seq_along(sortdata[,1]),
y=sortdata[,1]))
shiny::runApp('D:/Dissertation/R/Shiny/BurrowApp')
shiny::runApp('D:/Dissertation/R/Shiny/BurrowApp')
source('D:/Dissertation/R/Shiny/DiamondExample/app.R')
source('D:/Dissertation/R/Shiny/DiamondExample/app.R')
