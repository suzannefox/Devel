}
z <- sc(vardata)
View(z)
tab_BitVars <- function(myDataframe) {
# Create a blank dataframe
Crosstab <- data.frame(Variable= character(0),
1= integer(0),
0 = integer(0),
Blank= integer(0), stringsAsFactors = FALSE)
# get the variable names
headers <- names(myDataframe)
# loop over variables
for (i in seq_along(headers)) {
myVar = headers[i]
# create a table with the frequency counts
x <- as.matrix(table(vardata[,c(myVar)]))
# get the frequency of the 0's
freq0 <- x["0",]
# get the frequency of the 1's
freq1 <- x["1",]
# make a dataframe
newrow <- data.frame(myVar, freq0, freq1, 0)
names(newrow)[1] <- "Variable"
names(newrow)[2] <- "1"
names(newrow)[3] <- "0"
names(newrow)[4] <- "Blank"
# Append it to the crosstab
Crosstab <- rbind(Crosstab,newrow)
}
return(Crosstab)
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
z <- tab_BitVars(vardata)
View(z)
testdata <- data.frame(ids, var1,var2,var3,attr_dfgsd)
attr_dfgsd <- c(0,0,0,0)
testdata <- data.frame(ids, var1,var2,var3,attr_dfgsd)
vardata <- testdata[,c("var1","var2","var3","attr_dfgsd")]
z <- tab_BitVars(vardata)
rownames(x2)
myVar <- "var1"
x2 <- as.matrix(table(vardata[,c(myVar)]))
rownames(x2)
myVar <- "attr_dfgsd"
x2 <- as.matrix(table(vardata[,c(myVar)]))
rownames(x2)
x3 <- rownames(x2)
str(x3)
x4 <- match(x3,"1")
x4 <- match(x3,"0")
x4 <- "0" %in% x3
x4 <- "1" %in% x3
source('~/.active-rstudio-document', echo=TRUE)
z <- tab_BitVars(vardata)
View(z)
myVar <- "attr_dfgsd"
x2 <- as.matrix(table(vardata[,c(myVar)]))
View(x2)
source('~/.active-rstudio-document', echo=TRUE)
z <- tab_BitVars(vardata)
source('~/.active-rstudio-document', echo=TRUE)
z <- tab_BitVars(vardata)
source('~/.active-rstudio-document', echo=TRUE)
z <- tab_BitVars(vardata)
View(z)
vardata <- testdata[,c("attr_dfgsd")]
z <- as.matrix(table(vardata[,c(myVar)]))
z <- as.matrix(table(vardata[,c("attr_dfgsd")]))
vardata <- testdata[,c("attr_dfgsd")]
z <- as.matrix(table(vardata[,c("attr_dfgsd")]))
View(sortdata)
vardata <- as.data.frame(testdata[,c("attr_dfgsd")])
z <- as.matrix(table(vardata[,c("attr_dfgsd")]))
myVar <- "attr_dfgsd"
x2 <- as.matrix(table(vardata[,c(myVar)]))
names(testdata)
vardata <- testdata[,c("attr_dfgsd")]
vardata <- testdata[,c("var1",attr_dfgsd")]
vardata <- testdata[,c("var1","attr_dfgsd")]
vardata <- as.data.frame(testdata[,c("var1","attr_dfgsd")])
vardata <- as.data.frame(testdata[,c("attr_dfgsd")])
table(vardata[,c("attr_dfgsd")])
names(vardata)
vardata <- as.data.frame(testdata[,c("var1","attr_dfgsd")])
names(vardata)
vardata <- as.data.frame(testdata[,c("var1")])
names(vardata)
vardata <- testdata[c("var1","var2")]
vardata <- testdata[c("var1")]
names(vardata)
vardata <- as.data.frame(testdata[c("attr_dfgsd")])
z <- as.matrix(table(vardata[,c("attr_dfgsd")]))
View(z)
source('~/.active-rstudio-document', echo=TRUE)
vardata <- as.data.frame(testdata[c("attr_dfgsd")])
z <- tab_BitVars(vardata)
View(z)
z <- as.matrix(table(vardata[,c("attr_dfgsd")]))
View(z)
freq0 <- 0
if ("0" %in% z) {
freq0 <- z["0",]
print(paste("freq0",freq0))
}
"0" %in% z
z
dimnames(z)
rownames(z)
z1 <- table(vardata[,c("attr_dfgsd")])
z2 <- z1["0"]
z2 <- z1["1"]
source('~/.active-rstudio-document', echo=TRUE)
z <- tab_BitVars(vardata)
View(z)
source('~/.active-rstudio-document', echo=TRUE)
ids <- c(1980,1982,1956,3000)
var1 <- c(1,0,1,0)
var2 <- c(1,1,1,0)
var3 <- c(0,1,0,0)
attr_dfgsd <- c(0,0,0,0)
testdata <- data.frame(ids, var1,var2,var3,attr_dfgsd)
vardata <- as.data.frame(testdata[c("attr_dfgsd")])
z <- tab_BitVars(vardata)
source('~/.active-rstudio-document', echo=TRUE)
z <- tab_BitVars(vardata)
source('~/.active-rstudio-document', echo=TRUE)
z <- tab_BitVars(vardata)
vardata <- as.data.frame(testdata[c("var1","attr_dfgsd")])
z <- tab_BitVars(vardata)
View(z)
source('~/.active-rstudio-document', echo=TRUE)
z <- tab_BitVars(vardata)
View(z)
vardata <- as.data.frame(testdata[c("attr_dfgsd")])
z <- tab_BitVars(vardata)
myVar <- "attr_dfgsd"
x <- table(vardata[c(myVar)])
print("table is")
print(x)
x <- as.data.frame(table(vardata[c(myVar)]))
View(x)
x0 <- x[x$Var1=="0",]
View(x0)
x1 <- x[x$Var1=="1",]
View(x1)
x1.nrows
nrows(x1)
str(x1)
nrow(x1)
source('~/.active-rstudio-document', echo=TRUE)
z <- tab_BitVars(vardata)
View(z)
vardata <- as.data.frame(testdata[c("var2","attr_dfgsd")])
z <- tab_BitVars(vardata)
View(z)
myVar="attr_dfgsd"
# create a table with the frequency counts
x <- as.data.frame(table(vardata[c(myVar)]))
x0 <- x[x$Var1=="0",]
x1 <- x[x$Var1=="1",]
# get the frequency of the 0's
freq0 = 0
if (nrow(x0)==1){
freq0 <- x0$Freq
}
# get the frequency of the 1's
freq1 = 0
if (nrow(x1)==1){
freq1 <- x1$Freq
}
newrow <- data.frame(myVar, freq0, freq1, 0)
View(newrow)
source('~/.active-rstudio-document', echo=TRUE)
z <- tab_BitVars(vardata)
View(z)
vardata <- as.data.frame(testdata![c("ids")])
vardata <- as.data.frame(testdata[!c("ids")])
vardata <- as.data.frame(testdata[c(-"ids")])
vardata <- as.data.frame(testdata[c(-1)])
z <- tab_BitVars(vardata)
View(z)
testdata read.csv("D:/R/Crosstabs/test_bits.csv")
testdata <- read.csv("D:/R/Crosstabs/test_bits.csv")
View(testdata)
vardata <- as.data.frame(testdata[c(-1)])
z <- tab_BitVars(vardata)
View(z)
View(vardata)
vardata <- as.data.frame(testdata[c(-5)])
vardata <- as.data.frame(testdata[c(-4)])
View(vardata)
vardata <- as.data.frame(testdata[c(-1)])
vardata <- as.data.frame(testdata[c(-4)])
vardata <- as.data.frame(testdata[c(-1)])
vardata <- as.data.frame(vardata[c(-4)])
vardata <- as.data.frame(testdata[c(-1)])
vardata <- as.data.frame(vardata[c(-5)])
z <- tab_BitVars(vardata)
View(z)
myVar <- "var3"
x <- as.data.frame(table(vardata[c(myVar)]))
na_count <- as.data.frame(sapply(vardata, function(y) sum(length(which(is.na(y))))))
View(na_count)
one_count <- as.data.frame(sapply(vardata, function(y) sum(length(which(y=="1")))))
View(one_count)
count_0 <- as.data.frame(sapply(vardata, function(y) sum(length(which(y=="0")))))
count_1 <- as.data.frame(sapply(vardata, function(y) sum(length(which(y=="1")))))
count_na <- as.data.frame(sapply(vardata, function(y) sum(length(which(is.na(y))))))
rm(na_count)
rm(one_count)
count_tot <- as.data.frame(sapply(vardata, function(y) sum(length(which(y)))))
?which
?length
count_tot <- as.data.frame(sapply(vardata, function(y) numr(vardata))
count_tot <- as.data.frame(sapply(vardata, function(y) numr(vardata)))
count_tot <- as.data.frame(sapply(vardata, function(y) numr(vardata)))
count_tot <- as.data.frame(sapply(vardata, function(y) nrow(vardata)))
View(count_tot)
count_names <- as.data.frame(names(vardata))
# Create a blank dataframe
Crosstab <- data.frame(Variable= character(0),
"Total"= integer(0),
"1"= integer(0),
"0" = integer(0),
"Blank"= integer(0), stringsAsFactors = FALSE)
Crosstab  <- cbind(Crosstab, count_names, count_tot, count_1, count_0, count_na)
Crosstab  <- (count_names, count_tot, count_1, count_0, count_na)
View(count_names)
Crosstab  <- (count_names[1], count_tot[1], count_1[1], count_0[1], count_na[1])
Crosstab  <- data.frame(count_names[1], count_tot[1], count_1[1], count_0[1], count_na[1])
View(Crosstab)
colnames(Crosstab)<- c("Variable","Total","1","0","NA")
View(Crosstab)
source('~/.active-rstudio-document', echo=TRUE)
z <- tab_BitVars(vardata)
View(z)
vardata <- as.data.frame(testdata[c(-1)])
z <- tab_BitVars(vardata)
View(z)
z <- tab_BitVars(testdata)
View(z)
testdata <- read.csv("D:/R/Crosstabs/test_bits.csv")
z <- tab_BitVars(testdata)
View(testdata)
z <- tab_BitVars(testdata)
source('~/.active-rstudio-document', echo=TRUE)
z <- tab_BitVars(testdata)
vardata <- as.data.frame(testdata[c(1)])
z <- tab_BitVars(vardata)
View(z)
z <- tab_BitVars(testdata)
View(z)
z <- tab_BitVars(testdata)
z1 <- tab_BitVars(testdata)
View(z1)
source('~/.active-rstudio-document', echo=TRUE)
z1 <- tab_BitVars(testdata)
View(z)
View(z1)
count_oth <- as.data.frame(sapply(myDataframe,
function(y) sum(length(which(y=="1") || which(y=="0") || which(is.na(y))))))
count_oth <- as.data.frame(sapply(vardata,
function(y) sum(length(which(y=="1") || which(y=="0") || which(is.na(y))))))
View(count_oth)
count_oth <- as.data.frame(sapply(vardata,
function(y) sum(length(!(which(y=="1") || which(y=="0") || which(is.na(y))))))
View(count_oth)
View(count_oth)
count_oth <- as.data.frame(sapply(vardata,
function(y) sum(length((which(y=="1") || which(y=="0") || which(is.na(y))))))
count_oth <- as.data.frame(sapply(vardata,
function(y) sum(length((which(y=="1") || which(y=="0") || which(is.na(y)))))))
count_oth <- as.data.frame(sapply(vardata,
function(y) sum(length(which(y!="1") && which(y!="0") && which(!is.na(y))))))
View(count_oth)
count_oth <- as.data.frame(sapply(testdata,
function(y) sum(length(which(y!="1") && which(y!="0") && which(!is.na(y))))))
View(count_oth)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('D:/R/Shiny/Testing1')
shiny::runApp('D:/R/Shiny/Testing1')
runApp('D:/R/Shiny/Testing1')
runApp('D:/R/Shiny/Testing1')
source('D:/R/Crosstabs/Spreadfields.R', echo=TRUE)
install.packages("ggExtra")
install.packages("ggthemes")
source('D:/R/ggplot.R', echo=TRUE)
p
ggMarginal(p, binwidth="30", type = "histogram", fill="transparent")
ggMarginal(p,  type = "histogram", fill="transparent")
q < - ggMarginal(p,  type = "histogram", fill="transparent")
q
q
p
q
q < - ggMarginal(p,  type = "histogram", fill="transparent")
ggMarginal(p,  type = "histogram", fill="transparent")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/RFunctions/myPlots.R', echo=TRUE)
source('~/GitHub/RFunctions/myPlots.R', echo=TRUE)
myPlotter <- function(myData, Field) {
#rnorm <- data.frame(x = c(rnorm(length(myData[,Field]))))
myBinWidth = (max(myData[,Field]) - min(myData[,Field])) / 20
maxy <- max(hist(myData[,Field], breaks=seq(min(myData[,Field]), max(myData[,Field]), by=myBinWidth), plot=FALSE)$counts)
myMean = mean(myData[,Field])
myMedian = median(myData[,Field])
myQuantile = quantile(myData[,Field])
ColorMean <- "blue"
myPlot <- ggplot(myData,
aes_string(x=Field)) +
geom_histogram(binwidth=myBinWidth, colour="black", fill="#EBEDFA") +
geom_vline(aes_string(xintercept=myMean), color=ColorMean, linetype="solid", size=1) +
annotate("text", x = myMean, y = maxy * 0.9, label = "Mean", color=ColorMean) +
geom_vline(aes_string(xintercept=myQuantile[2]), color="sienna1", linetype="solid", size=.5) +
annotate("text", x = myQuantile[2], y = maxy * 0.7, label = "Q1", color="sienna1") +
geom_vline(aes_string(xintercept=myQuantile[3]), color="sienna3", linetype="solid", size=1) +
annotate("text", x = myQuantile[3], y = maxy, label = "Median", color="sienna3") +
geom_vline(aes_string(xintercept=myQuantile[4]), color="sienna1", linetype="solid", size=.5) +
annotate("text", x = myQuantile[4], y = maxy * 0.7, label = "Q3", color="sienna1") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none")
return(myPlot)
}
source('~/GitHub/RFunctions/myPlots.R', echo=TRUE)
source('~/GitHub/RFunctions/myPlots.R', echo=TRUE)
p1
View(myPlotter)
source('~/GitHub/RFunctions/myPlots.R', echo=TRUE)
myPlot_Int <- function(myData, Field) {
#rnorm <- data.frame(x = c(rnorm(length(myData[,Field]))))
myBinWidth = (max(myData[,Field]) - min(myData[,Field])) / 20
maxy <- max(hist(myData[,Field], breaks=seq(min(myData[,Field]), max(myData[,Field]), by=myBinWidth), plot=FALSE)$counts)
myMean = mean(myData[,Field])
myMedian = median(myData[,Field])
myQuantile = quantile(myData[,Field])
ColorMean <- "blue"
myPlot <- ggplot(myData,
aes_string(x=Field)) +
geom_histogram(binwidth=myBinWidth, colour="black", fill="#EBEDFA") +
geom_vline(aes_string(xintercept=myMean), color=ColorMean, linetype="solid", size=1) +
annotate("text", x = myMean, y = maxy * 0.9, label = "Mean", color=ColorMean) +
geom_vline(aes_string(xintercept=myQuantile[2]), color="sienna1", linetype="solid", size=.5) +
annotate("text", x = myQuantile[2], y = maxy * 0.7, label = "Q1", color="sienna1") +
geom_vline(aes_string(xintercept=myQuantile[3]), color="sienna3", linetype="solid", size=1) +
annotate("text", x = myQuantile[3], y = maxy, label = "Median", color="sienna3") +
geom_vline(aes_string(xintercept=myQuantile[4]), color="sienna1", linetype="solid", size=.5) +
annotate("text", x = myQuantile[4], y = maxy * 0.7, label = "Q3", color="sienna1") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none")
return(myPlot)
}
source('~/GitHub/RFunctions/myPlots.R', echo=TRUE)
source('~/GitHub/RFunctions/myPlots.R', echo=TRUE)
source('~/GitHub/RFunctions/myPlots.R', echo=TRUE)
norm <- rnorm(1000)
norm <- as.dataframe(rnorm(1000))
norm <- as.data.frame(rnorm(1000))
View(norm)
names(norm) <-c("vals")
p1 <- myPlot_Int(norm, "vals")
p1
p1 <- myPlot_Int(norm, "vls")
p1
p1 <- myPlot_Int(norm, "vals")
runApp('D:/R/Shiny/Testing1')
runApp('D:/R/Shiny/Testing1')
rm(list = ls())
library(ggplot2)
require(cowplot)
install.packages("cowplot")
library(cowplot)
plot1 <- qplot(1)
plot2 <- qplot(1)
plot_grid(plot1, plot2, align='h', labels=c('A', 'B'))
plot_grid(plot1, plot2, align='h'
)
?datasets
diamonds
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
e
error
possibleerror
possibleError
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/function_Burrow.R')
testPlot_Int <- function(myData, Field) {
#rnorm <- data.frame(x = c(rnorm(length(myData[,Field]))))
plotData <- subset(myData,,select=c((Field)))
myBinWidth = (max(myData[,Field]) - min(myData[,Field])) / 20
maxy <- max(hist(myData[,Field], breaks=seq(min(myData[,Field]), max(myData[,Field]), by=myBinWidth), plot=FALSE)$counts)
myMean = mean(myData[,Field])
myMedian = median(myData[,Field])
myQuantile = quantile(myData[,Field])
ColorMean <- "blue"
myPlot <- ggplot(myData,
aes_string(x=Field)) +
geom_histogram(binwidth=myBinWidth, colour="black", fill="#EBEDFA") +
geom_vline(aes_string(xintercept=myMean), color=ColorMean, linetype="solid", size=1) +
annotate("text", x = myMean, y = maxy * 0.9, label = "Mean", color=ColorMean) +
geom_vline(aes_string(xintercept=myQuantile[2]), color="sienna1", linetype="solid", size=.5) +
annotate("text", x = myQuantile[2], y = maxy * 0.7, label = "Q1", color="sienna1") +
geom_vline(aes_string(xintercept=myQuantile[3]), color="sienna3", linetype="solid", size=1) +
annotate("text", x = myQuantile[3], y = maxy, label = "Median", color="sienna3") +
geom_vline(aes_string(xintercept=myQuantile[4]), color="sienna1", linetype="solid", size=.5) +
annotate("text", x = myQuantile[4], y = maxy * 0.7, label = "Q3", color="sienna1") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none")
return(myPlot)
}
iris
testPlot_Int(iris,"Sepal.Width")
xx <- function(myData, Field) {
plotData <- myData[c(Field)]
plotData
}
xx(iris,"Sepal.Width")
xx <- function(myData, Field) {
plotData <- myData[c(Field)]
myBinWidth = (max(plotData[,1]) - min(plotData[,1])) / 20
print(myBinWidth)
}
xx(iris,"Sepal.Width")
xx <- function(myData, Field) {
plotData <- myData[c(Field)]
plotData <- plotData[complete.cases(plotData),]
myBinWidth = (max(plotData[,1]) - min(plotData[,1])) / 20
print(myBinWidth)
}
xx(iris,"Sepal.Width")
View(write_Fileinfo)
xx(iris,"Sepal.Width")
xx <- function(myData, Field) {
plotData <- myData[c(Field)]
plotData <- plotData[complete.cases(plotData),]
print(plotData)
myBinWidth = (max(plotData[,1]) - min(plotData[,1])) / 20
print(myBinWidth)
}
xx(iris,"Sepal.Width")
xx <- function(myData, Field) {
plotData <- myData[c(Field)]
plotData <- as.data.frame(plotData[complete.cases(plotData),])
print(plotData)
myBinWidth = (max(plotData[,1]) - min(plotData[,1])) / 20
print(myBinWidth)
}
xx(iris,"Sepal.Width")
source('E:/MSc Course/Dissertation/R/function_Burrow.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/function_Burrow.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
View(burrow.bestguess)
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/function_Burrow.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/function_Burrow.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/function_Burrow.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/function_Burrow.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
source('E:/MSc Course/Dissertation/R/function_Burrow.R')
source('E:/MSc Course/Dissertation/R/BurrowNew.R')
