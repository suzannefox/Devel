install.packages("TeachingDemos")
mle.demo(x = rnorm(10, 10, 2), start.mean = mean(x) - start.sd, start.sd = 1.2 * sqrt(var(x)))
use TeachingPackages
if(interactive()){
mle.demo()
m <- runif(1, 50,100)
s <- runif(1, 1, 10)
x <- rnorm(15, m, s)
mm <- mean(x)
ss <- sqrt(var(x))
ss2 <- sqrt(var(x)*11/12)
mle.demo(x)
# now find the mle from the graph and compare it to mm, ss, ss2, m, and s
}
use mle.demo
import mle.demo
library(TeachingDemos)
if(interactive()){
mle.demo()
m <- runif(1, 50,100)
s <- runif(1, 1, 10)
x <- rnorm(15, m, s)
mm <- mean(x)
ss <- sqrt(var(x))
ss2 <- sqrt(var(x)*11/12)
mle.demo(x)
# now find the mle from the graph and compare it to mm, ss, ss2, m, and s
}
mle.demo(x = rnorm(10, 10, 2), start.mean = mean(x) - start.sd, start.sd = 1.2 * sqrt(var(x)))
mle.demo()
# Values
mle.demo(x = rnorm(10, 10, 2), start.mean = mean(x) - start.sd, start.sd = 1.2 * sqrt(var(x)))
if(interactive()){
mle.demo()
m <- runif(1, 50,100)
s <- runif(1, 1, 10)
x <- rnorm(15, m, s)
mm <- mean(x)
ss <- sqrt(var(x))
ss2 <- sqrt(var(x)*11/12)
mle.demo(x)
# now find the mle from the graph and compare it to mm, ss, ss2, m, and s
}
install.packages("maxlike")
package(maxlike)
package(maxlike)
library(maxlike)
x <- rnorm(1000,1,2)
loglik <- function(param)
{
mu <-param[1]
sigma = param[2]
loglike <- -0.5N*log(2*pi)-N*log(sigma)-sum(0.5*(x-mu)^2/sigma^2)
loglike
}
# library(maxlike)
x <- rnorm(1000,1,2)
N <- length(x)
res = maxLik(loglik, start = c(0,1))
print(res)
coeff(res)
# coeff(res)
#
# http://www.inside-r.org/packages/cran/TeachingDemos/docs/mle.demo
# Arguments
#
# x
# A vector of data (presumably from a normal distribution).
# start.mean
# The initial value for estimating the mean.
# start.sd
# The initial value for estimating the standard deviation.
#
# Details
#
# The function creates a plot with 3 panels: the top panel shows a normal curve based on the current values of the mean and standard deviation along with a vertical line for each point in x (the product of the heights of these lines is the likelihood, the sum of the logs of their heights is the log likelihood).
#
# The lower 2 plots show the profiles of the mean and standard deviation. The y-axis is the likelihoods of the parameters tried so far, and the x-axes are the mean and standard deviation tried. The point corresponding to the current parameter estimates will be solid red.
#
# A Tk slider box is also created that allows you to change the current estimates of the mean and standard deviation to show the effect on the log likelihood and find the maximum likelihood estimate.
# Values
#
# This function is run for its side effects and returns NULL.
# See Also
#
# fitdistr in package MASS, mle in package stats4, slider
# mle.demo(x = rnorm(10, 10, 2), start.mean = mean(x) - start.sd, start.sd = 1.2 * sqrt(var(x)))
if(interactive()){
mle.demo()
m <- runif(1, 50,100)
s <- runif(1, 1, 10)
x <- rnorm(15, m, s)
mm <- mean(x)
ss <- sqrt(var(x))
ss2 <- sqrt(var(x)*11/12)
mle.demo(x)
# now find the mle from the graph and compare it to mm, ss, ss2, m, and s
}
hist(lynx)
source('~/.active-rstudio-document', echo=TRUE)
debugSource('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
install.packages("neuralnet")
install.packages("neuralnet")
?runif
View(traininginput)
View(trainingoutput)
?as
View(traininginput)
cbind(traininginput,trainingoutput)
?neuralnet
source('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
source('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
source('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
source('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
source('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
source('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
source('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
source('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
source('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
source('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
source('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
?stop
source('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
source('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
source('~/GitHub/R-Experiments/MLE/MLE-1.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/DataScience/R/NeuralNet/NN-SquareRoot.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
attach(iris)
head(iris)
plot(iris)
mean(iris)
mean(Sepal.Length)
mean(iris(:,1:4))
x<-iris
mean(x(:,1:4))
y <- (x(:,1:4))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(iris$Petal.Length, iris$Petal.Width, main="Edgar Anderson's Iris Data")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(iris)
plot(Petal.Length, Petal.Width,
plot(Petal.Length, Petal.Width,
main="Edgar Anderson's Iris Data")
tail(iris)
source('~/.active-rstudio-document', echo=TRUE)
plot(iris$Petal.Length, iris$Petal.Width, main="Edgar Anderson's Iris Data")
source('D:/DataScience/R/RStudio/iris/GettingStarted.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getwd
getwd()
setwd("D:/R/Markdown")
getwd()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(viridis)
install.packages('viridis')
library(viridis)
image(volcano, col = viridis(200))
image(volcano, col = viridis(200, option = "A"))
install.packages('tibble')
packageStatus('tibble')
packageStatus()
packageStatus()
packageVersion("tibble")
install.packages("knitr")
packageVersion("knitr")
install.packages("caret",dependencies = c("Depends", "Imports", "Suggests"))
source('~/.active-rstudio-document', echo=TRUE)
library(caret)
data(scat)
installed.packages()
x <-installed.packages()
head x
head(x)
x(,c(1,4))
y <- x(,c(1,4))
y <- x[],c(1,4)]
y <- x[,c(1,4)]
head(y)
View(x)
y <- x[,c(1,3)]
View(x)
head(y)
y[]
View(y)
y[y$Package=="caret"]
str(y)
class(y)
y <- as.data.frame(y)
class(y)
y[y$Package=="caret"]
y[y$Package=="caret",]
packages("caret")
package_version("caret")
sessioninfo()
packageVersion("caret")
"caret" %in% loadedNamespaces()
install.packages("caret")
install.packages("caret")
library(RODBC);
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
with (p, table(brand, year))
with (p, table(Brand, Year))
with (p, table(strat_Brand_launch, Year))
names(p)
names(p[,c("Target_Gender")])
(p[,c("Target_Gender")])
shiny::runApp('D:/R/Shiny/Test02')
FileName <- ""
testdata <- p
myData <- myContent("Header", testdata, FileName)
for(i in names(myData)) {
myContent(myData,i,FileName)
}
myData <- myContent("Header", testdata, FileName)
source('D:/R/Functions/myContent.R', echo=TRUE)
myData <- myContent("Header", testdata, FileName)
for(i in names(myData)) {
myContent(myData,i,FileName)
}
source('D:/R/ggplot.R', echo=TRUE)
runApp('D:/R/Shiny/UberCharts')
runApp('D:/R/Shiny/UberCharts')
runApp('D:/R/Shiny/UberCharts')
pt1 <- qplot(rnorm(500),fill=I("red"),binwidth=0.2,title="plotgraph1")
pt1 <- qplot(rnorm(500),fill=I("red"),binwidth=0.2)
pt2 <- reactive({
input$do2
if (input$do2){
return(qplot(rnorm(500),fill=I("blue"),binwidth=0.2,title="plotgraph2"))
} else {
return(NULL)
}
runApp('D:/R/Shiny/UberChart')
runApp('D:/R/Shiny/UberChart')
runApp('D:/R/Shiny/UberChart')
